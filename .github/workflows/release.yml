name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to bump the release by.
        required: true
        default: minor
        type: choice
        options:
          - major
          - minor
          - patch

      app-name:
        description: The name of the app in the monorepo to create a release PR for
        required: true
        default: ojl-tracker
        type: choice
        options:
          - app-a
          - app-b

jobs:
  git_tag_by_app:
    runs-on: ubuntu-latest
    name: Get Commits by App
    outputs:
      last_tag: ${{ steps.extract-last-tag.outputs.last_tag }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract Last Git Tag Prefixed with App Name
        id: extract-last-tag
        run: |
          APP_NAME=${{ inputs.app-name }}
          # Get the last tag prefixed with the app name
          LAST_TAG=$(git tag --list "${APP_NAME}*" | sort -V | tail -n 1)

          # If no app-specific tag exists, fall back to the last tag in the repository
          if [ -z "$LAST_TAG" ]; then
            echo "No git tag was found for $APP_NAME."
            exit 1
          fi

          echo "Last tag for $APP_NAME: $LAST_TAG"
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
  create_release_pr:
    runs-on: ubuntu-latest
    name: Create Release PR
    needs: git_tag_by_app
    if: needs.git_tag_by_app.outputs.last_tag != ''

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump the Version
        id: bump-version
        run: |
          new_version_number=$(npm version ${{ inputs.version }} -w ${{ inputs.app-name }} | grep -oP 'v\d+\.\d+\.\d+')
          echo "new_version_number=${new_version_number}" >> $GITHUB_OUTPUT

          # Configure Git user identity
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Commit the version bump
          git add "apps/${{ inputs.app-name }}/package.json"
          git commit -m "chore(${APP_NAME}): bump version to ${new_version_number}"
      
      - name: Install ESLint Preset
        run: |
          npm install conventional-changelog --no-save
          npm install conventional-changelog-eslint --no-save

      - name: Generate Changelog
        run: |
          APP_NAME=${{ inputs.app-name }}
          CHANGELOG_PATH="apps/${APP_NAME}/CHANGELOG.md"
          LAST_TAG=${{ needs.git_tag_by_app.outputs.last_tag }}
          NEW_VERSION=${{ steps.bump-version.outputs.new_version_number }}

          echo "Last tag: $LAST_TAG"

          # Generate changelog using generate-changelog
          cd apps/${APP_NAME}
          npx conventional-changelog -p eslint -i "CHANGELOG.md" -s --commit-path "." --tag-prefix="${{ inputs.app-name }}@"

          # Format the changelog using Prettier
          npx prettier --write "CHANGELOG.md"

          # Configure Git user identity
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Commit the updated changelog
          git add "CHANGELOG.md"
          git commit -m "chore: update changelog"

      - name: Push Changes
        run: |
          git checkout -b release/${{ inputs.app-name }}/${{ steps.bump-version.outputs.new_version_number }}
          git push origin release/${{ inputs.app-name }}/${{ steps.bump-version.outputs.new_version_number }} --no-verify

      - name: Create Pull Request
        run: |
          PR_DATA=$(jq -n \
            --arg title "chore: ${{ inputs.app-name }} ${{ steps.bump-version.outputs.new_version_number }} release" \
            --arg head "release/${{ inputs.app-name }}/${{ steps.bump-version.outputs.new_version_number }}" \
            --arg base "main" \
            --arg body "Automated changes by a GitHub Action" \
            '{title: $title, head: $head, base: $base, body: $body}')
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "$PR_DATA"